{
  "hash": "9c8751272e1bcfc37155081616127d66",
  "result": {
    "markdown": "---\ntitle: \"Using SoftBlock to Design an Experiment\"\ndescription: \"In this demo, I'm going to walk through an example experimental design using methods from our [recent paper on Balanced Design](https://arxiv.org/abs/2010.11332).\"\nabstract: >\n  This is a demo of using SoftBlock for experimental design for a notional randomization of precincts in North Carolina. To optimize power, we focus on ensuring very similar patterns of prior voting patterns in treatment and in control. This demo walks through all the necessary steps for this process and shows how to perform estimation of average and heterogeneous effects.\ndate: \"2022-05-10\"\ncategories:\n  - experimental-design\n  - demo\ncode-fold: true\nimage: /posts/softblock-demo/three-designs.jpg\n---\n\n::: {.cell}\n\n:::\n\n\n# Introduction\n\nIn particular, I'm going to imagine that I'm designing an experiment in which I assign different treatments to particular precincts in North Carolina. In order to optimize power, of course, we want to make sure that our two test groups look as similar as possible in terms of prior voting patterns.\n\nThus, the steps in this design will be:\n\n1. Collect relevant historical data.\n2. Define variables on which we wish to balance.\n3. Allocate treatment assignment using new methods.\n4. Simulate the power of hypothesis tests under the proposed design.\n5. Fake some outcome data and analyze it for average and heterogeneous treatment effects.\n\n# Implementation of methods\n\n## Description\n\nThe relevant API is a function with `tidyverse` semantics called `assign_softblock` (or `assign_greedy_neighbors`). These functions accept a vector of columns to be used in the design. The SoftBlock version additionally accepts two arguments, `.s2` for the bandwidth of the RBF kernel to use in the construction of a similarity matrix as well as `.neighbors` which indicates the number of nearest neighbors to include in the graph on which to construct the spanning tree. These parameters don't generally need to be modified.\n\n## Source Code\n<details><summary>See source code</summary>\n\n::: {.cell}\n\n```{.r .cell-code}\nwriteLines(readLines(\"https://raw.githubusercontent.com/ddimmery/softblock/master/r_implementation.R\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlibrary(Matrix)\nlibrary(igraph)\nlibrary(FNN)\nlibrary(hash)\n\nassign_greedily <- function(graph) {\n    adj_mat = igraph::as_adjacency_matrix(graph, type=\"both\", sparse=TRUE) != 0\n    N = nrow(adj_mat)\n    root_id = make.keys(sample(N, 1))\n\n    a = rbinom(1, 1, 0.5)\n    visited = hash()\n\n    random_order = make.keys(sample(N))\n    unvisited = hash(random_order, random_order)\n\n    colors = hash()\n    stack = hash()\n\n    stack[[root_id]] <- a\n    tentative_color = rbinom(N, 1, 0.5)\n    while ((!is.empty(unvisited)) || (!is.empty(stack))) {\n        if (is.empty(stack)) {\n            cur_node = keys(unvisited)[1]\n            del(cur_node, unvisited)\n            color = tentative_color[as.integer(cur_node)]\n        } else {\n            cur_node = keys(stack)[1]\n            color = stack[[cur_node]]\n            del(cur_node, stack)\n            del(cur_node, unvisited)\n        }\n        visited[[cur_node]] = cur_node\n        colors[[cur_node]] = color\n        children = make.keys(which(adj_mat[as.integer(cur_node), ]))\n        for (child in children) {\n            if(has.key(child, unvisited)) {\n                stack[[child]] = 1 - color\n            }\n        }\n    }\n    values(colors, keys=1:N)\n}\n\n\nassign_softblock <- function(.data, cols, .s2=2, .neighbors=6) {\n    expr <- rlang::enquo(cols)\n    pos <- tidyselect::eval_select(expr, data = .data)\n    df_cov <- rlang::set_names(.data[pos], names(pos))\n    cov_mat = scale(model.matrix(~.+0, df_cov))\n    N = nrow(cov_mat)\n    st = lubridate::now()\n    knn = FNN::get.knn(cov_mat, k=.neighbors)\n    st = lubridate::now()\n    knn.adj = Matrix::sparseMatrix(i=rep(1:N, .neighbors), j=c(knn$nn.index), x=exp(-c(knn$nn.dist) / .s2))\n    knn.graph <- graph_from_adjacency_matrix(knn.adj, mode=\"plus\", weighted=TRUE, diag=FALSE)\n    E(knn.graph)$weight <- (-1 * E(knn.graph)$weight)\n    st = lubridate::now()\n    mst.graph = igraph::mst(knn.graph)\n    E(mst.graph)$weight <- (-1 * E(mst.graph)$weight)\n    st = lubridate::now()\n    assignments <- assign_greedily(mst.graph)\n    .data$treatment <- assignments\n    attr(.data, \"laplacian\") <- igraph::laplacian_matrix(mst.graph, normalize=TRUE, sparse=TRUE)\n    .data\n}\n\nassign_greedy_neighbors <- function(.data, cols) {\n    expr <- rlang::enquo(cols)\n    pos <- tidyselect::eval_select(expr, data = .data)\n    df_cov <- rlang::set_names(.data[pos], names(pos))\n    cov_mat = scale(model.matrix(~.+0, df_cov))\n    N = nrow(cov_mat)\n    knn = FNN::get.knn(cov_mat, k=1)\n    knn.adj = Matrix::sparseMatrix(i=1:N, j=c(knn$nn.index), x=c(knn$nn.dist))\n    knn.graph <- graph_from_adjacency_matrix(knn.adj, mode=\"plus\", weighted=TRUE, diag=FALSE)\n    assignments <- assign_greedily(knn.graph)\n    .data$treatment <- assignments\n    attr(.data, \"laplacian\") <- igraph::laplacian_matrix(knn.graph, normalize=TRUE, sparse=TRUE)\n    .data\n}\n\nassign_matched_pairs <- function(.data, cols, .s2=2, .neighbors=6) {\n    expr <- rlang::enquo(cols)\n    pos <- tidyselect::eval_select(expr, data = .data)\n    df_cov <- rlang::set_names(.data[pos], names(pos))\n    cov_mat = scale(model.matrix(~.+0, df_cov))\n    N = nrow(cov_mat)\n    knn = FNN::get.knn(cov_mat, k=.neighbors)\n    knn.adj = Matrix::sparseMatrix(i=rep(1:N, .neighbors), j=c(knn$nn.index), x=exp(-c(knn$nn.dist) / .s2))\n    knn.graph <- graph_from_adjacency_matrix(knn.adj, mode=\"plus\", weighted=TRUE, diag=FALSE)\n    E(knn.graph)$weight <- (-1 * E(knn.graph)$weight)\n    mwm.graph = igraph::max_bipartite_match(knn.graph)\n    E(mwm.graph)$weight <- (-1 * E(mwm.graph)$weight)\n    assignments <- assign_greedily(mwm.graph)\n    .data$treatment <- assignments\n    attr(.data, \"laplacian\") <- igraph::laplacian_matrix(mwm.graph, normalize=TRUE, sparse=TRUE)\n    .data\n}\n\n# library(tibble)\n# data = tibble(\n#     x1=runif(10),\n#     x2=runif(10),\n#     x3=rbinom(10, 1, 0.5)\n# )\n# library(dplyr)\n# library(tidyr)\n# library(ggplot2)\n# data %>% assign_softblock(c(x1, x2)) -> newdata\n\n# ggplot(newdata, aes(x=x1, y=x2, color=factor(treatment), shape=factor(x3))) + geom_point() + theme_minimal()\n\n# newdata %>%\n#     attr(\"laplacian\") %>%\n#     ifelse(lower.tri(.), ., 0) %>%\n#     as_tibble() -> adj_df\n# names(adj_df) <- paste0(1:ncol(adj_df))\n\n# adj_df %>%\n#     group_by(id_1=as.character(row_number())) %>%\n#     gather(id_2, weight, -id_1) %>%\n#     filter(weight != 0)  %>%\n#     mutate(id_2=as.character(id_2), id=paste(id_1, id_2, sep='-')) -> adj_df\n\n# locs = newdata %>% mutate(id=as.character(row_number())) %>% select(id, x1, x2, x3)\n\n# edges=bind_rows(\n# adj_df  %>% inner_join(locs, by=c('id_1'='id')),\n# adj_df  %>% inner_join(locs, by=c('id_2'='id'))\n# ) %>% arrange(id) %>% ungroup()\n\n# pp = ggplot(newdata, aes(x=x1, y=x2)) +\n# geom_line(aes(group=id, size=1), data=edges, color='grey') +\n# geom_point(aes(color=factor(treatment), shape=factor(x3), size=2), alpha=.9) +\n# scale_size_continuous(range=c(1, 3)) +\n# theme_minimal() + theme(legend.position='none')\n\n# print(pp)\n```\n:::\n:::\n\n</details>\n\n# Data Preparation\n\nThis demo will be based on North Carolina data because their Board of Elections makes it very easy to get precinct level data. I'm also only going to use historical data from the most recent election to avoid needing to match precincts across elections.\n\nWith access to a full voter file, this section could be drastically improved by incorporating other important elements into the design like demographics.\n\n## Get Precinct data {.tabset}\n\n### Results Data\n\n::: {.cell hash='index_cache/html/get_precinct_results_d1c2efc22d72ed750c45b6260e9c0425'}\n\n```{.r .cell-code}\nurl <- \"http://dl.ncsbe.gov/ENRS/2020_11_03/results_pct_20201103.zip\"\nzip_file <- tempfile(fileext = \".zip\")\ndownload.file(url, zip_file, mode = \"wb\")\nspec = cols(\n  County = col_character(),\n  `Election Date` = col_character(),\n  Precinct = col_character(),\n  `Contest Group ID` = col_double(),\n  `Contest Type` = col_character(),\n  `Contest Name` = col_character(),\n  Choice = col_character(),\n  `Choice Party` = col_character(),\n  `Vote For` = col_double(),\n  `Election Day` = col_double(),\n  `One Stop` = col_double(),\n  `Absentee by Mail` = col_double(),\n  Provisional = col_double(),\n  `Total Votes` = col_double(),\n  `Real Precinct` = col_character(),\n  X16 = col_skip()\n)\nresults <- readr::read_tsv(zip_file, col_types=spec)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nâ€¢ `` -> `...16`\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The following named parsers don't match the column names: X16\n```\n:::\n:::\n\n\n### Shapefiles\n\n::: {.cell hash='index_cache/html/get_precinct_shapes_b35eb3361df0f797fc8662ac0d02a298'}\n\n```{.r .cell-code}\nurl = \"https://s3.amazonaws.com/dl.ncsbe.gov/ShapeFiles/Precinct/SBE_PRECINCTS_20201018.zip\"\ntemp <- tempfile()\ntemp2 <- tempfile()\ndownload.file(url, temp)\nunzip(zipfile = temp, exdir = temp2)\nnc_SHP_file <- list.files(temp2, pattern = \".shp$\",full.names=TRUE)\nshapes <- sf::read_sf(nc_SHP_file)\n```\n:::\n\n\n## Aggregate Data and Join\n\n::: {.cell}\n\n```{.r .cell-code}\nresults %>%\n    filter(`Real Precinct` == 'Y') %>%\n    group_by(County, Precinct) %>%\n    summarize(\n        total_vote_pres=sum(`Total Votes`[`Contest Name` == 'US PRESIDENT'], na.rm=TRUE),\n        dem_share_pres=sum(`Total Votes`[`Contest Name` == 'US PRESIDENT' & `Choice Party` == 'DEM'], na.rm=TRUE)/total_vote_pres,\n        gop_share_pres=sum(`Total Votes`[`Contest Name` == 'US PRESIDENT' & `Choice Party` == 'REP'], na.rm=TRUE)/total_vote_pres,\n        total_vote_senate=sum(`Total Votes`[`Contest Name` == 'US SENATE'], na.rm=TRUE),\n        dem_share_senate=sum(`Total Votes`[`Contest Name` == 'US SENATE' & `Choice Party` == 'DEM'], na.rm=TRUE)/total_vote_senate,\n        gop_share_senate=sum(`Total Votes`[`Contest Name` == 'US SENATE' & `Choice Party` == 'REP'], na.rm=TRUE)/total_vote_senate,\n        total_vote_gov=sum(`Total Votes`[`Contest Name` == 'NC GOVERNOR'], na.rm=TRUE),\n        dem_share_gov=sum(`Total Votes`[`Contest Name` == 'NC GOVERNOR' & `Choice Party` == 'DEM'], na.rm=TRUE)/total_vote_gov,\n        gop_share_gov=sum(`Total Votes`[`Contest Name` == 'NC GOVERNOR' & `Choice Party` == 'REP'], na.rm=TRUE)/total_vote_gov,\n        total_vote_house=sum(`Total Votes`[grepl('US HOUSE OF REPRESENTATIVES DISTRICT', `Contest Name`)], na.rm=TRUE),\n        dem_share_house=sum(`Total Votes`[grepl('US HOUSE OF REPRESENTATIVES DISTRICT', `Contest Name`) & `Choice Party` == 'DEM'], na.rm=TRUE)/total_vote_house,\n        gop_share_house=sum(`Total Votes`[grepl('US HOUSE OF REPRESENTATIVES DISTRICT', `Contest Name`) & `Choice Party` == 'REP'], na.rm=TRUE)/total_vote_house\n    ) %>% ungroup() -> results_agg\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'County'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\ninner_join(results_agg, shapes, by=c('County'='county_nam', 'Precinct'='prec_id')) -> df_joined\nDT::datatable(df_joined %>% sample_n(size=100) %>% dplyr::select(-geometry), rownames = FALSE, options=list(scrollX=TRUE, autoWidth = TRUE))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-1770d66a86dcce969965\" style=\"width:100%;height:auto;\" class=\"datatables html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-1770d66a86dcce969965\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"datatlantic/Sea Level/Cedar Island\",\"G11\",\"MINERAL SPRINGS  2\",\"C1\",\"BRADSHAW\",\"11\",\"MARS HILL\",\"235\",\"W25\",\"BLACK MOUNTAIN 3 - LAKE TOMAHAWK\",\"128\",\"CROSS CREEK 21\",\"CAPE FEAR\",\"ANDERSON\",\"HOBGOOD\",\"FAIRPLAINS\",\"BEAVER DAM\",\"CREEKSVILLE\",\"SANDY CREEK\",\"ST JOHN\",\"G40A2\",\"07-00\",\"PISGAH VIEW\",\"LONGWOOD\",\"FAIRVIEW VOLUNTEER FIRE DEPT\",\"STATESVILLE  4\",\"FOREST CITY  2\",\"CROSS CREEK 30-G4\",\"113\",\"ELIZABETHTOWN  2\",\"LAKEWOOD SCHOOL\",\"TOWNCREEK\",\"02-05\",\"SILVER CREEK 01\",\"001\",\"ELLENDALE\",\"18-01\",\"HARRELLS\",\"12-04\",\"21\",\"20-04\",\"STEWARTS CREEK\",\"0035.3\",\"LEASBURG\",\"JACKS CREEK\",\"LUMBERTON  7\",\"ROCK GROVE\",\"WILLIAMS 2\",\"EAST GRAHAM\",\"DUNCAN CREEK-GOLDEN VALLEY\",\"NORTH PEMBROKE\",\"PARKVILLE\",\"HOPE VALLEY BAPTIST\",\"16-01\",\"BENTONVILLE\",\"H24\",\"FR5B\",\"ANTIOCH\",\"01-29\",\"HOT SPRINGS\",\"THOMASVILLE 3 64\",\"RICHFIELD\",\"NCGR1\",\"H01\",\"021\",\"AYDEN B\",\"015\",\"LAWNDL\",\"CHIMNEY ROCK\",\"BELVIDERE\",\"WHITE CROSS\",\"H20B\",\"SHINGLETREE 1\",\"G65\",\"FALLING CREEK\",\"STALLINGS VFD\",\"MONTIBELLO\",\"04-10\",\"WINDSOR 1\",\"BETHLEHEM PRESBYTERIAN CHURCH\",\"CLARKSVILLE\",\"ASHEBORO SOUTH\",\"ASHBROOK\",\"CROSSROADS AME ZION CHURCH\",\"FORSYTH TECH CC MAZIE WOODRUFF CTR\"],[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],[92,92,87,25,11,68,41,45,47,41,29,60,41,41,36,16,41,77,53,80,96,57,60,65,11,60,26,71,17,42,97,95,66,35,68,41,13,45,10,11,49,81,26,60,9,32,10,13,12,60,2,92,82,13,96,92,43,32,17,100,78,80,24,1,81,78,72,32,92,51,41,41,97,92,57,29,84,41,41,60,74,60,23,81,72,68,41,10,41,54,90,26,92,8,90,30,76,36,90,34],[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>County<\\/th>\\n      <th>Precinct<\\/th>\\n      <th>total_vote_pres<\\/th>\\n      <th>dem_share_pres<\\/th>\\n      <th>gop_share_pres<\\/th>\\n      <th>total_vote_senate<\\/th>\\n      <th>dem_share_senate<\\/th>\\n      <th>gop_share_senate<\\/th>\\n      <th>total_vote_gov<\\/th>\\n      <th>dem_share_gov<\\/th>\\n      <th>gop_share_gov<\\/th>\\n      <th>total_vote_house<\\/th>\\n      <th>dem_share_house<\\/th>\\n      <th>gop_share_house<\\/th>\\n      <th>id<\\/th>\\n      <th>enr_desc<\\/th>\\n      <th>of_prec_id<\\/th>\\n      <th>county_id<\\/th>\\n      <th>blockid<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"scrollX\":true,\"autoWidth\":true,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[2,3,4,5,6,7,8,9,10,11,12,13,14,17]}],\"order\":[],\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n## Add some geographic features\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_joined$geometry %>%\n    st_centroid() %>%\n    st_transform(\"+init=epsg:4326\") %>%\n    st_coordinates() -> latlong\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in CPL_crs_from_input(x): GDAL Message 1: +init=epsg:XXXX syntax is\ndeprecated. It might return a CRS with a non-EPSG compliant axis order.\n```\n:::\n\n```{.r .cell-code}\ndf_joined$longitude = latlong[, 'X']\ndf_joined$latitude = latlong[, 'Y']\narea = df_joined$geometry %>% st_transform(\"+init=epsg:4326\") %>% st_area()\ndf_joined$area_km2 = units::drop_units(area) / 1e6 # convert m^2 to km^2\ndf_joined <- df_joined %>% mutate(vote_density_pres = total_vote_pres / area_km2)\n```\n:::\n\n# Assign treatment four ways\n\n::: {.panel-tabset}\n\n## Softblock\n\n::: {.cell}\n\n```{.r .cell-code}\nstart_time = lubridate::now()\ndf_joined %>% assign_softblock(c(\n    longitude, latitude, area_km2, vote_density_pres, # geographic\n    total_vote_pres, dem_share_pres, gop_share_pres, # 2020 presidential\n    total_vote_senate, dem_share_senate, gop_share_senate, # 2020 senate\n    total_vote_gov, dem_share_gov, gop_share_gov, # 2020 governor\n    total_vote_house, dem_share_house, gop_share_house # 2020 house\n)) %>%\nrename(treatment_sb=treatment)-> df_joined\nsoftblock_weights <- attr(df_joined, \"laplacian\")\nend_time = lubridate::now()\nprint(end_time - start_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 0.7002029 secs\n```\n:::\n:::\n\n\n## Greedy nearest neighbors\n\n::: {.cell}\n\n```{.r .cell-code}\nstart_time = lubridate::now()\ndf_joined %>% assign_greedy_neighbors(c(\n    longitude, latitude, area_km2, vote_density_pres, # geographic\n    total_vote_pres, dem_share_pres, gop_share_pres, # 2020 presidential\n    total_vote_senate, dem_share_senate, gop_share_senate, # 2020 senate\n    total_vote_gov, dem_share_gov, gop_share_gov, # 2020 governor\n    total_vote_house, dem_share_house, gop_share_house # 2020 house\n)) %>%\nrename(treatment_nn=treatment)-> df_joined\nnn_weights <- attr(df_joined, \"laplacian\")\nend_time = lubridate::now()\nprint(end_time - start_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 1.446061 secs\n```\n:::\n:::\n\n\n## QuickBlock\n\n::: {.cell}\n\n```{.r .cell-code}\nstart_time = lubridate::now()\ndf_joined %>% dplyr::select(\n    longitude, latitude, area_km2, vote_density_pres, # geographic\n    total_vote_pres, dem_share_pres, gop_share_pres, # 2020 presidential\n    total_vote_senate, dem_share_senate, gop_share_senate, # 2020 senate\n    total_vote_gov, dem_share_gov, gop_share_gov, # 2020 governor\n    total_vote_house, dem_share_house, gop_share_house # 2020 house\n) -> df_qb\nqb_blocks = quickblock(as.data.frame(df_qb), size_constraint = 6L)\ndf_joined$treatment_qb = as.integer(as.character(assign_treatment(qb_blocks, treatments=c('0', '1'))))\nend_time = lubridate::now()\nprint(end_time - start_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 0.01819277 secs\n```\n:::\n:::\n\n\n## Matched Pairs\n\n::: {.cell}\n\n```{.r .cell-code}\n# This is extremely slow.\n# start_time = lubridate::now()\n# df_joined %>% assign_matched_pairs(c(\n#     longitude, latitude, area_km2, vote_density_pres, # geographic\n#     total_vote_pres, dem_share_pres, gop_share_pres, # 2020 presidential\n#     total_vote_senate, dem_share_senate, gop_share_senate, # 2020 senate\n#     total_vote_gov, dem_share_gov, gop_share_gov, # 2020 governor\n#     total_vote_house, dem_share_house, gop_share_house # 2020 house\n# )) %>%\n# rename(treatment_mp=treatment)-> df_joined\n# mp_weights <- attr(df_joined, \"laplacian\")\n# end_time = lubridate::now()\n# print(end_time - start_time)\n```\n:::\n\n:::\n\n\n# Power simulation\n\nTo do power calculations consistently across methods, I will do the following:\n\n1. Calculate the implied regression adjustment for each design, applied to vote share in 2020 as the outcome.\n2. Find the residual for each point.\n3. Permute residuals over units.\n4. Estimate power for a given effect size by pulling additional permutations.\n5. Sweep over a range of effect sizes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_power_simulator = function(W, A, Y) {\n    dL = diag(W)\n    Dinv = (2 * A - 1) / dL\n    estimates = drop((Dinv %*% W) %*% Y)\n    residuals = Y - estimates\n    x_mat = cbind(A, 1)\n    xlx = t(x_mat) %*% W %*% x_mat\n    bread = MASS::ginv(as.matrix(xlx))\n    detect_effect = function(effect=1) {\n        sim_outcome = estimates + sample(residuals) + A * effect\n        coefs = bread %*% t(x_mat) %*% W %*% sim_outcome\n        r = diag(drop((sim_outcome - (x_mat %*% coefs)) ^ 2))\n        meat = t(x_mat) %*% (W %*% r %*% W) %*% x_mat\n        vcv = bread %*% meat %*% bread\n        upr = coefs[1] + qnorm(0.975) * sqrt(vcv[1])\n        lwr = coefs[1] + qnorm(0.025) * sqrt(vcv[1])\n        lwr > 0\n    }\n    detect_effect\n}\ncreate_power_simulator_qb = function(blocks, A, Y) {\n    estimate_by_block = tapply(Y[A==1], blocks[A==1], mean) - tapply(Y[A==0], blocks[A==0], mean)\n    estimates = unlist(purrr::map(blocks, function(b) estimate_by_block[as.character(b)]))\n    residuals = Y - estimates\n    detect_effect = function(effect=1) {\n        sim_outcome = estimates + sample(residuals) + A * effect\n        result = quickblock::blocking_estimator(sim_outcome, blocks, A)\n        upr = result$effects[2,1] + qnorm(0.975) * sqrt(result$effect_variances[2,1])\n        lwr = result$effects[2,1] + qnorm(0.025) * sqrt(result$effect_variances[2,1])\n        lwr > 0\n    }\n    detect_effect\n}\n```\n:::\n\n## Simulate each design\n\n::: {.panel-tabset}\n\n### Softblock\n\n::: {.cell}\n\n```{.r .cell-code}\nsimulate_power = create_power_simulator(softblock_weights, df_joined$treatment_sb, df_joined$dem_share_pres)\nestimate_power_for_effect = function(effect) mean(replicate(25, simulate_power(effect=effect)))\neffects = seq(0, 0.05, length=25)\npower_sb = unlist(purrr::map(effects, estimate_power_for_effect))\n```\n:::\n\n\n### Greedy Neighbors\n\n::: {.cell}\n\n```{.r .cell-code}\nsimulate_power = create_power_simulator(nn_weights, df_joined$treatment_nn, df_joined$dem_share_pres)\nestimate_power_for_effect = function(effect) mean(replicate(25, simulate_power(effect=effect)))\npower_nn = unlist(purrr::map(effects, estimate_power_for_effect))\n```\n:::\n\n\n### QuickBlock\n\n::: {.cell}\n\n```{.r .cell-code}\nsimulate_power = create_power_simulator_qb(qb_blocks, df_joined$treatment_qb, df_joined$dem_share_pres)\nestimate_power_for_effect = function(effect) mean(replicate(25, simulate_power(effect=effect)))\neffects = seq(0, 0.05, length=25)\npower_qb = unlist(purrr::map(effects, estimate_power_for_effect))\n```\n:::\n\n:::\n\n## Power Comparison\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n    tibble(\n        effects=c(effects, effects, effects),\n        power=c(power_sb, power_nn, power_qb),\n        design=c(rep('SoftBlock', length(power_sb)), rep('Greedy Neighbors', length(power_sb)), rep('QuickBlock', length(power_sb)))\n    ), aes(effects, power, color=design)) + geom_line() +\n    scale_x_continuous('Effect (pp)', labels=scales::percent) +\n    scale_y_continuous(\"Power\", labels=scales::percent) +\n    scale_color_discrete(\"Design\") +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/power_plot-1.png){width=672}\n:::\n:::\n\n\n# Analysis\n\n## Average Effects\n\nThe effect estimates here use the appropriate design-based estimators for each design.\n\nFirst, I'm going to generate a fake outcome to use. I'll leave the average effect near zero (0.5pp), but individual effects are random draws from around that vale, but with heterogeneous effects based on democratic vote share in 2020 (i.e. positive effects in democratic precincts and vice versa).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_joined$outcome = df_joined$dem_share_pres\ndf_joined$ite = with(df_joined, 0.005 + 0.005 * (plogis((dem_share_pres - median(dem_share_pres)) / sd(dem_share_pres))))\ndf_joined$outcome_sb = with(df_joined, outcome + treatment_sb * ite)\ndf_joined$outcome_nn = with(df_joined, outcome + treatment_nn * ite)\ndf_joined$outcome_qb = with(df_joined, outcome + treatment_qb * ite)\n```\n:::\n\n\n::: {.panel-tabset}\n\n### Softblock\n\n::: {.cell}\n\n```{.r .cell-code}\nestimate_effect = function(W, A, Y) {\n    dL = diag(W)\n    Dinv = (2 * A - 1) / dL\n    x_mat = cbind(A, 1)\n    xlx = t(x_mat) %*% W %*% x_mat\n    bread = MASS::ginv(as.matrix(xlx))\n    coefs = bread %*% t(x_mat) %*% W %*% Y\n    r = diag(drop((Y - (x_mat %*% coefs)) ^ 2))\n    meat = t(x_mat) %*% (W %*% r %*% W) %*% x_mat\n    vcv = bread %*% meat %*% bread\n    list(estimate=coefs[1], std.error=sqrt(vcv[1,1]))\n}\nsb_est = estimate_effect(softblock_weights, df_joined$treatment_sb, df_joined$outcome_sb)\n```\n:::\n\n\n### Greedy Neighbors\n\n::: {.cell}\n\n```{.r .cell-code}\nnn_est = estimate_effect(nn_weights, df_joined$treatment_nn, df_joined$outcome_nn)\n```\n:::\n\n\n### QuickBlock\n\n::: {.cell}\n\n```{.r .cell-code}\nresult = quickblock::blocking_estimator(df_joined$outcome_qb, qb_blocks, df_joined$treatment_qb)\nqb_est = list(estimate=result$effects[2,1], std.error=sqrt(result$effect_variances[2,1]))\n```\n:::\n\n\n:::\n\n## Plot Average Effects\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(\n    estimate=c(sb_est$estimate, nn_est$estimate, qb_est$estimate),\n    std.error=c(sb_est$std.error, nn_est$std.error, qb_est$std.error),\n    design=c(\"SoftBlock\", \"Greedy Neighbors\", \"QuickBlock\")\n) %>%\nggplot(aes(x=design, y=estimate, ymin=estimate-1.96*std.error, ymax=estimate+1.96*std.error)) +\n    geom_pointrange() +\n    scale_x_discrete(\"Design\") +\n    scale_y_continuous(\"ATE (pp)\", labels=scales::percent) +\n    coord_flip() +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot_fx-1.png){width=672}\n:::\n:::\n\n\n## Heterogeneous Effects\n\nThese effects will be estimated using DR-learner of [Kennedy (2020)](https://arxiv.org/abs/2004.14497). For simplicity, I will estimate nuisance functions using `glmnet`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict.hte.split = function(x, a, y, s, predict.s=4) {\n    s.pi = (predict.s) %% 4 + 1\n    s.mu = (predict.s + 1) %% 4 + 1\n    s.dr = (predict.s + 2) %% 4 + 1\n    pihat <- predict(cv.glmnet(x[s==s.pi,],a[s==s.pi], family=\"binomial\", nfolds=10), newx=x, type=\"response\", s=\"lambda.min\")\n    mu0hat <- predict(cv.glmnet(x[a==0 & s==s.mu,],y[a==0 & s==s.mu], nfolds=10), newx=x, type=\"response\", s=\"lambda.min\")\n    mu1hat <- predict(cv.glmnet(x[a==1 & s==s.mu,],y[a==1 & s==s.mu], nfolds=10),newx=x, type=\"response\", s=\"lambda.min\")\n    pseudo <- ((a-pihat)/(pihat*(1-pihat)))*(y-a*mu1hat-(1-a)*mu0hat) + mu1hat - mu0hat\n    drl <- predict(cv.glmnet(x[s==s.dr,],pseudo[s==s.dr]),newx=x[s==predict.s, ], s=\"lambda.min\")\n    drl\n}\npredict.hte.crossfit = function(x, a, y) {\n    N = length(a)\n    s = sample(1:4, N, replace=TRUE)\n    hte = rep(NA_real_, N)\n    for (split in 1:4) {\n        hte[s==split] = predict.hte.split(x, a, y, s, predict.s=split)\n    }\n    hte\n}\ncalculate_hte <- function(.data, cols, .treatment='treatment', .outcome='outcome') {\n    expr <- rlang::enquo(cols)\n    pos <- tidyselect::eval_select(expr, data = .data)\n    df_cov <- rlang::set_names(.data[pos], names(pos))\n    cov_mat = scale(model.matrix(~.+0, df_cov))\n    .data$hte = predict.hte.crossfit(cov_mat, .data[[.treatment]], .data[[.outcome]])\n    .data\n}\n```\n:::\n\n\n## Estimate HTEs\n\n::: {.panel-tabset}\n\n### Softblock\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_joined %>% calculate_hte(c(\n    longitude, latitude, area_km2, vote_density_pres, # geographic\n    total_vote_pres, # 2020 presidential\n    total_vote_senate, dem_share_senate, gop_share_senate, # 2020 senate\n    total_vote_gov, dem_share_gov, gop_share_gov, # 2020 governor\n    total_vote_house, dem_share_house, gop_share_house # 2020 house\n), .treatment='treatment_sb', .outcome='outcome_sb') %>% rename(hte_sb=hte) -> df_joined\nsummary(df_joined$hte_sb)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-0.010306  0.004135  0.007536  0.007148  0.009029  0.033580 \n```\n:::\n:::\n\n\n### Greedy Neighbors\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_joined %>% calculate_hte(c(\n    longitude, latitude, area_km2, vote_density_pres, # geographic\n    total_vote_pres, # 2020 presidential\n    total_vote_senate, dem_share_senate, gop_share_senate, # 2020 senate\n    total_vote_gov, dem_share_gov, gop_share_gov, # 2020 governor\n    total_vote_house, dem_share_house, gop_share_house # 2020 house\n), .treatment='treatment_nn', .outcome='outcome_nn') %>% rename(hte_nn=hte) -> df_joined\nsummary(df_joined$hte_nn)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.005742 0.006825 0.007388 0.007670 0.008596 0.010863 \n```\n:::\n:::\n\n\n### QuickBlock\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_joined %>% calculate_hte(c(\n    longitude, latitude, area_km2, vote_density_pres, # geographic\n    total_vote_pres, # 2020 presidential\n    total_vote_senate, dem_share_senate, gop_share_senate, # 2020 senate\n    total_vote_gov, dem_share_gov, gop_share_gov, # 2020 governor\n    total_vote_house, dem_share_house, gop_share_house # 2020 house\n), .treatment='treatment_qb', .outcome='outcome_qb') %>% rename(hte_qb=hte) -> df_joined\nsummary(df_joined$hte_qb)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      Min.    1st Qu.     Median       Mean    3rd Qu.       Max. \n-0.0007862  0.0070832  0.0083612  0.0082249  0.0094074  0.0398552 \n```\n:::\n:::\n\n\n:::\n\n## Plot HTE distributions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df_joined, aes()) +\ngeom_histogram(aes(x=hte_sb, fill='SoftBlock'), bins=50, alpha=0.4) +\ngeom_histogram(aes(x=hte_nn, fill='Greedy Neighbors'), bins=50, alpha=0.4) +\ngeom_histogram(aes(x=hte_qb, fill='QuickBlock'), bins=50, alpha=0.4) +\nscale_x_continuous(\"Effect (pp)\", labels=scales::percent) +\ntheme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/hte_plot-1.png){width=672}\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<link href=\"../../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/datatables-binding-0.22/datatables.js\"></script>\n<script src=\"../../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../../site_libs/dt-core-1.11.3/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"../../site_libs/dt-core-1.11.3/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/dt-core-1.11.3/js/jquery.dataTables.min.js\"></script>\n<link href=\"../../site_libs/crosstalk-1.2.0/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/crosstalk-1.2.0/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}